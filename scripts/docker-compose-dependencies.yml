version: "3.8"

services:
     
  prometheus:
    image: prom/prometheus:v2.42.0
    mem_limit: 800m
    hostname: prometheus
    container_name: prometheus_dev
    ports:
      - 9090:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.config.file=/etc/prometheus/web.yml
    volumes:
      - ./../deploy-configurations/prometheus/dev/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./../deploy-configurations/prometheus/dev/web.yml:/etc/prometheus/web.yml
    networks:
      - microservices3deps
      
  grafana:
    image: grafana/grafana:9.3.6
    mem_limit: 700m
    hostname: grafana
    container_name: grafana_dev
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    environment:
      GF_SECURITY_ADMIN_USER: guest
      GF_SECURITY_ADMIN_PASSWORD: guest
    networks:
      - microservices3deps

  rabbitmq:
    image: rabbitmq:3.9.28-management
    mem_limit: 800m
    hostname: rabbitmq
    container_name: rabbitmq_dev
    ports:
      - 15672:15672
      - 5672:5672
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - ./../deploy-configurations/rabbitmq/dev/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./../deploy-configurations/rabbitmq/dev/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - microservices3deps
      
  zipkin:
    image: openzipkin/zipkin-slim:2
    mem_limit: 800m
    hostname: zipkin
    container_name: zipkin_dev
    ports:
      - 9411:9411
    networks:
      - microservices3deps

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.1
    mem_limit: 1g
    hostname: elasticsearch
    container_name: elasticsearch_dev
    healthcheck:
      test: curl -u elastic:guest -X GET http://localhost:9200/_cat/health && curl -u elastic:guest -X POST http://localhost:9200/_security/user/kibana_system/_password -H 'Content-Type:application/json' -d '{"password":"kibanapassword"}' && curl -u elastic:guest -X POST http://localhost:9200/_security/role/forniture_role -H 'Content-Type:application/json' -d '{"cluster":["all"],"indices":[{"names":["fornitures"],"privileges":["all"]}],"applications":[{"application":"forniture-service","privileges":["all"],"resources":["*"]}]}' && curl -u elastic:guest -X POST http://localhost:9200/_security/user/forniture -H 'Content-Type:application/json' -d '{"password":"forniture","roles":["forniture_role"],"full_name":"Forniture DB Admin","email":"forniture@example.com","metadata":{"intelligence":7}}' || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s 
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      discovery.type: single-node
      discovery.seed_hosts: elasticsearch
      xpack.security.enabled: true
      ELASTIC_PASSWORD: guest
      # ES_JAVA_OPTS: -Xms512m -Xmx512m
    networks:
      - microservices3deps

  kibana:
    image: docker.elastic.co/kibana/kibana:8.6.1
    mem_limit: 700m
    hostname: kibana
    container_name: kibana_dev
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
      xpack.security.enabled: true
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: kibanapassword
    depends_on:
      - elasticsearch
    networks:
      - microservices3deps

  mysqldb:
    image: mysql:8.0.32
    mem_limit: 800m
    hostname: mysqldb
    container_name: mysql_dev
    ports:
      - 3306:3306
    environment:
      MYSQL_DATABASE: forniture_store_db
      MYSQL_ROOT_PASSWORD: guest
    networks:
      - microservices3deps
  
  postgresql:
    image: postgres:15.3
    mem_limit: 800m
    hostname: postgresql
    container_name: postgresql_dev
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: guest
      POSTGRES_PASSWORD: guest
      POSTGRES_DB: forniture_store_db
    volumes:
      - ./../deploy-configurations/postgresql/dev:/docker-entrypoint-initdb.d
    networks:
      - microservices3deps

  redisdb:
    image: redis:7.0.8-bullseye
    mem_limit: 700m
    hostname: redisdb
    container_name: redis_dev
    ports:
      - 6379:6379
    command:
      - --requirepass guest
    networks:
      - microservices3deps

  mongodb:
    image: mongo:6.0.4-jammy
    mem_limit: 800m
    hostname: mongodb
    container_name: mongodb_dev
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: guest
      MONGO_INITDB_ROOT_PASSWORD: guest
      MONGO_INITDB_DATABASE: chat_app_db
    volumes:
      - ./../deploy-configurations/mongo/dev/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - microservices3deps

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - microservices3deps

  kafka:
    image: docker.io/bitnami/kafka:3.4
    ports:
      - 9092:9092
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ENABLE_KRAFT=no
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    depends_on:
      - zookeeper
    networks:
      - microservices3deps

  kafkadrop:
    image: obsidiandynamics/kafdrop:3.30.0
    hostname: kafkadrop
    container_name: kafkadrop_dev
    ports:
      - 9000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    networks:
      - microservices3deps

networks:
  microservices3deps: